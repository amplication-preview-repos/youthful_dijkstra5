/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Grade as PrismaGrade,
  Assignment as PrismaAssignment,
  Student as PrismaStudent,
} from "@prisma/client";

export class GradeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GradeCountArgs, "select">): Promise<number> {
    return this.prisma.grade.count(args);
  }

  async grades<T extends Prisma.GradeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GradeFindManyArgs>
  ): Promise<PrismaGrade[]> {
    return this.prisma.grade.findMany<Prisma.GradeFindManyArgs>(args);
  }
  async grade<T extends Prisma.GradeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GradeFindUniqueArgs>
  ): Promise<PrismaGrade | null> {
    return this.prisma.grade.findUnique(args);
  }
  async createGrade<T extends Prisma.GradeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GradeCreateArgs>
  ): Promise<PrismaGrade> {
    return this.prisma.grade.create<T>(args);
  }
  async updateGrade<T extends Prisma.GradeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GradeUpdateArgs>
  ): Promise<PrismaGrade> {
    return this.prisma.grade.update<T>(args);
  }
  async deleteGrade<T extends Prisma.GradeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GradeDeleteArgs>
  ): Promise<PrismaGrade> {
    return this.prisma.grade.delete(args);
  }

  async getAssignment(parentId: string): Promise<PrismaAssignment | null> {
    return this.prisma.grade
      .findUnique({
        where: { id: parentId },
      })
      .assignment();
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.grade
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
