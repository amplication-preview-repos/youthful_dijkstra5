/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Teacher } from "./Teacher";
import { TeacherCountArgs } from "./TeacherCountArgs";
import { TeacherFindManyArgs } from "./TeacherFindManyArgs";
import { TeacherFindUniqueArgs } from "./TeacherFindUniqueArgs";
import { CreateTeacherArgs } from "./CreateTeacherArgs";
import { UpdateTeacherArgs } from "./UpdateTeacherArgs";
import { DeleteTeacherArgs } from "./DeleteTeacherArgs";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { Department } from "../../department/base/Department";
import { TeacherService } from "../teacher.service";
@graphql.Resolver(() => Teacher)
export class TeacherResolverBase {
  constructor(protected readonly service: TeacherService) {}

  async _teachersMeta(
    @graphql.Args() args: TeacherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Teacher])
  async teachers(
    @graphql.Args() args: TeacherFindManyArgs
  ): Promise<Teacher[]> {
    return this.service.teachers(args);
  }

  @graphql.Query(() => Teacher, { nullable: true })
  async teacher(
    @graphql.Args() args: TeacherFindUniqueArgs
  ): Promise<Teacher | null> {
    const result = await this.service.teacher(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Teacher)
  async createTeacher(
    @graphql.Args() args: CreateTeacherArgs
  ): Promise<Teacher> {
    return await this.service.createTeacher({
      ...args,
      data: {
        ...args.data,

        department: args.data.department
          ? {
              connect: args.data.department,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Teacher)
  async updateTeacher(
    @graphql.Args() args: UpdateTeacherArgs
  ): Promise<Teacher | null> {
    try {
      return await this.service.updateTeacher({
        ...args,
        data: {
          ...args.data,

          department: args.data.department
            ? {
                connect: args.data.department,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Teacher)
  async deleteTeacher(
    @graphql.Args() args: DeleteTeacherArgs
  ): Promise<Teacher | null> {
    try {
      return await this.service.deleteTeacher(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Course], { name: "courses" })
  async findCourses(
    @graphql.Parent() parent: Teacher,
    @graphql.Args() args: CourseFindManyArgs
  ): Promise<Course[]> {
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Department, {
    nullable: true,
    name: "department",
  })
  async getDepartment(
    @graphql.Parent() parent: Teacher
  ): Promise<Department | null> {
    const result = await this.service.getDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
