/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Teacher as PrismaTeacher,
  Course as PrismaCourse,
  Department as PrismaDepartment,
} from "@prisma/client";

export class TeacherServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TeacherCountArgs, "select">): Promise<number> {
    return this.prisma.teacher.count(args);
  }

  async teachers<T extends Prisma.TeacherFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeacherFindManyArgs>
  ): Promise<PrismaTeacher[]> {
    return this.prisma.teacher.findMany<Prisma.TeacherFindManyArgs>(args);
  }
  async teacher<T extends Prisma.TeacherFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeacherFindUniqueArgs>
  ): Promise<PrismaTeacher | null> {
    return this.prisma.teacher.findUnique(args);
  }
  async createTeacher<T extends Prisma.TeacherCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeacherCreateArgs>
  ): Promise<PrismaTeacher> {
    return this.prisma.teacher.create<T>(args);
  }
  async updateTeacher<T extends Prisma.TeacherUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeacherUpdateArgs>
  ): Promise<PrismaTeacher> {
    return this.prisma.teacher.update<T>(args);
  }
  async deleteTeacher<T extends Prisma.TeacherDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeacherDeleteArgs>
  ): Promise<PrismaTeacher> {
    return this.prisma.teacher.delete(args);
  }

  async findCourses(
    parentId: string,
    args: Prisma.CourseFindManyArgs
  ): Promise<PrismaCourse[]> {
    return this.prisma.teacher
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .courses(args);
  }

  async getDepartment(parentId: string): Promise<PrismaDepartment | null> {
    return this.prisma.teacher
      .findUnique({
        where: { id: parentId },
      })
      .department();
  }
}
